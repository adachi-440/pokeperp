From bc2e09c6ce4520e89a7517a36f3bb6bee5cb2d66 Mon Sep 17 00:00:00 2001
From: 0xshora <112358132134.fibon@gmail.com>
Date: Sun, 14 Sep 2025 17:28:40 +0900
Subject: [PATCH 1/4] =?UTF-8?q?**=E5=AE=9F=E8=A3=85=E6=A6=82=E8=A6=81**=20?=
 =?UTF-8?q?-=20TypeScript=20=E8=A3=BD=20Reporter=EF=BC=88=E5=AE=9A?=
 =?UTF-8?q?=E6=9C=9F=20Push=EF=BC=89=E3=82=92=E6=96=B0=E8=A6=8F=E8=BF=BD?=
 =?UTF-8?q?=E5=8A=A0=E3=81=97=E3=80=81=E5=A4=96=E9=83=A8=E4=BE=A1=E6=A0=BC?=
 =?UTF-8?q?=E5=8F=96=E5=BE=97=E2=86=92=E5=8D=98=E4=BD=8D=E6=AD=A3=E8=A6=8F?=
 =?UTF-8?q?=E5=8C=96=E2=86=92`pushPrice`=20=E9=80=81=E4=BF=A1=E3=82=92?=
 =?UTF-8?q?=E5=AE=9F=E8=A3=85=E3=81=97=E3=81=BE=E3=81=97=E3=81=9F=E3=80=82?=
 =?UTF-8?q?=20-=20`priceScale()`/`heartbeat()`=20=E3=82=92=20on-chain=20?=
 =?UTF-8?q?=E3=81=8B=E3=82=89=E5=8F=96=E5=BE=97=EF=BC=88=E7=92=B0=E5=A2=83?=
 =?UTF-8?q?=E5=A4=89=E6=95=B0=E3=81=A7=E4=B8=8A=E6=9B=B8=E3=81=8D=E5=8F=AF?=
 =?UTF-8?q?=EF=BC=89=E3=80=82`heartbeat`=20=E6=9C=AA=E6=BA=80=E3=81=AE?=
 =?UTF-8?q?=E9=96=93=E9=9A=94=E3=81=A7=E5=AE=9A=E6=9C=9F=20Push=E3=80=82?=
 =?UTF-8?q?=E9=80=81=E4=BF=A1=E5=A4=B1=E6=95=97=E6=99=82=E3=81=AF=E7=B0=A1?=
 =?UTF-8?q?=E6=98=93=E3=83=AA=E3=83=88=E3=83=A9=E3=82=A4=E3=80=82?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

**追加ファイル**
- `reporter/package.json`: 依存・実行スクリプト定義（`ethers`, `axios`, `dotenv`, `p-retry`, `p-timeout`, `zod`）
- `reporter/tsconfig.json`: TypeScript 設定（ESM, NodeNext）
- `reporter/.env.example`: 必須/任意の環境変数テンプレ
- `reporter/README.md`: セットアップと実行手順
- `reporter/src/index.ts`: 実装本体

**使い方**
- セットアップ
  - `cd reporter`
  - `cp .env.example .env` を編集（必須: `RPC_URL`, `PRIVATE_KEY`, `ORACLE_ADDRESS`）
  - `npm i`
- 実行
  - 開発: `npm run dev`
  - ビルド: `npm run build`
  - 実行: `npm start`

**環境変数**
- 必須:
  - `RPC_URL`: L2 RPC URL
  - `PRIVATE_KEY`: Reporter の秘密鍵（EOA にガス必要）
  - `ORACLE_ADDRESS`: `OracleAdapterSimple` のアドレス
- 任意:
  - `PRICE_SOURCE_URL`: 価格 API（`{ price: number }` を返す想定）
  - `SCALE`: on-chain の `priceScale()` を上書き（例: `100`）
  - `HEARTBEAT_SEC`: on-chain の `heartbeat()` を上書き（例: `10`）
  - `PUSH_INTERVAL_MS`: 送信間隔（既定 `3000`、`heartbeat` より短い必要あり）

**動作詳細（`reporter/src/index.ts`）**
- `zod` で環境変数バリデーション。
- `ethers v6` で Provider/Wallet/Contract 初期化。ABI は `pushPrice`, `priceScale`, `heartbeat`, `lastUpdated`。
- 価格取得:
  - `axios` + `p-timeout`（1.5s）+ `p-retry`（最大3回、指数バックオフ）。
  - レスポンス `{ price: number }` を想定。非数/0以下は弾く。
- 丸め:
  - `roundToScale(price, scale)` → `BigInt(Math.round(price * Number(scale)))`
- 送信:
  - `provider.getFeeData()` で `maxFeePerGas`/`maxPriorityFeePerGas` 設定。
  - `pushPrice` を送信し `tx.wait()`。ログに価格・tx ハッシュ出力。
- スケジューリング:
  - 初回即時 `push`。以後 `setInterval` で `PUSH_INTERVAL_MS` ごとに実行。
  - 直前の送信が継続中ならスキップ（多重送信防止）。
  - `PUSH_INTERVAL_MS >= heartbeat*1000` の場合は警告し、`heartbeat - 200ms` に自動調整。
- 終了処理:
  - `SIGINT`/`SIGTERM` で interval を停止して終了。

**仕様準拠ポイント**
- Push 型（単一 Reporter）で `pushPrice` を定期送信。
- on-chain の `priceScale()/heartbeat()` 利用、単位整合（tickSize と同一スケール想定）。
- `heartbeat` 未満の周期で送信、外部価格の異常値を拒否、基本的なリトライ・タイムアウト実装。

**注意/前提**
- コントラクトの `reporter` に当該 EOA を設定してください（`onlyReporter` により制限）。
- `PRICE_SOURCE_URL` が未設定の既定値（example.com）はダミーです。実運用 URL に差し替えてください。
- 実ネットワークでの利用前にテストネットでの確認を推奨します。

**次のステップ（任意）**
- 実際の価格ソース（取引所APIや独自集計）に接続
- ログ整備（winston 等）や健全性チェック（`lastUpdated` 乖離アラート）
- Slack/メール等の通知フック追加

必要であれば、簡易モック価格サーバーやデプロイ済みアダプタとの疎通確認スクリプトも用意します。
---
 reporter/.env.example  |  16 ++++
 reporter/README.md     |  48 ++++++++++++
 reporter/package.json  |  26 +++++++
 reporter/src/index.ts  | 161 +++++++++++++++++++++++++++++++++++++++++
 reporter/tsconfig.json |  16 ++++
 5 files changed, 267 insertions(+)
 create mode 100644 reporter/.env.example
 create mode 100644 reporter/README.md
 create mode 100644 reporter/package.json
 create mode 100644 reporter/src/index.ts
 create mode 100644 reporter/tsconfig.json

diff --git a/reporter/.env.example b/reporter/.env.example
new file mode 100644
index 0000000..d6fd540
--- /dev/null
+++ b/reporter/.env.example
@@ -0,0 +1,16 @@
+# 必須
+RPC_URL=
+PRIVATE_KEY=
+ORACLE_ADDRESS=
+
+# 任意（未指定なら on-chain を参照）
+# SCALE=100
+# HEARTBEAT_SEC=10
+
+# 任意（送信周期。heartbeat より短く）
+PUSH_INTERVAL_MS=3000
+
+# 任意（価格取得用エンドポイント）
+# レスポンスは { "price": <number> } を想定
+PRICE_SOURCE_URL=https://example.com/price
+
diff --git a/reporter/README.md b/reporter/README.md
new file mode 100644
index 0000000..57b897d
--- /dev/null
+++ b/reporter/README.md
@@ -0,0 +1,48 @@
+# Oracle Reporter (TypeScript / Push 型)
+
+本パッケージは、外部価格を取得してオンチェーンの Oracle Adapter に `pushPrice(price)` を定期送信（push）するミニMVP実装です。
+
+## 前提
+- Node.js 18+（推奨 20+）
+- コントラクト側は `pushPrice(uint256)`, `priceScale()`, `heartbeat()` を実装していること（例: `OracleAdapterSimple`）。
+
+## セットアップ
+```
+cd reporter
+cp .env.example .env  # 必要項目を設定
+npm i
+```
+
+必須環境変数:
+- `RPC_URL`: L2 RPC エンドポイント
+- `PRIVATE_KEY`: Reporter EOA の秘密鍵（資金が必要）
+- `ORACLE_ADDRESS`: Oracle Adapter のコントラクトアドレス
+
+任意:
+- `PRICE_SOURCE_URL`: 価格取得API（`{ price: number }` を返す想定）
+- `SCALE`: on-chain の `priceScale()` を上書き（例: `100`）
+- `HEARTBEAT_SEC`: on-chain の `heartbeat()` を上書き（例: `10`）
+- `PUSH_INTERVAL_MS`: 実際の送信間隔（デフォルト 3000ms）
+
+## 実行
+開発（トランスパイル無し）:
+```
+npm run dev
+```
+
+ビルド + 実行:
+```
+npm run build
+npm start
+```
+
+## 動作概要
+- 起動時に on-chain の `priceScale()`/`heartbeat()` を取得（環境変数で上書き可）。
+- 指定間隔で `PRICE_SOURCE_URL` から価格を取得し、`scale` に丸めて `pushPrice` を送信。
+- `heartbeat` より送信間隔が長い場合は警告し、必要に応じて自動調整します。
+- 送信失敗は簡易リトライ（指数バックオフ）。
+
+## 注意
+- Reporter アドレスは Adapter の `reporter` に設定されている必要があります。
+- ガス代が高騰した場合に備え、`maxFeePerGas`/`maxPriorityFeePerGas` を RPC から自動取得します。
+
diff --git a/reporter/package.json b/reporter/package.json
new file mode 100644
index 0000000..f27470e
--- /dev/null
+++ b/reporter/package.json
@@ -0,0 +1,26 @@
+{
+  "name": "oracle-reporter",
+  "version": "0.1.0",
+  "private": true,
+  "type": "module",
+  "main": "dist/index.js",
+  "scripts": {
+    "dev": "tsx src/index.ts",
+    "build": "tsc -p tsconfig.json",
+    "start": "node dist/index.js",
+    "typecheck": "tsc -p tsconfig.json --noEmit"
+  },
+  "dependencies": {
+    "axios": "^1.7.7",
+    "dotenv": "^16.4.5",
+    "ethers": "^6.13.4",
+    "p-retry": "^6.2.0",
+    "p-timeout": "^6.1.2",
+    "zod": "^3.23.8"
+  },
+  "devDependencies": {
+    "tsx": "^4.19.2",
+    "typescript": "^5.6.3"
+  }
+}
+
diff --git a/reporter/src/index.ts b/reporter/src/index.ts
new file mode 100644
index 0000000..598131d
--- /dev/null
+++ b/reporter/src/index.ts
@@ -0,0 +1,161 @@
+import 'dotenv/config';
+import axios from 'axios';
+import pRetry from 'p-retry';
+import pTimeout from 'p-timeout';
+import { z } from 'zod';
+import { ethers } from 'ethers';
+
+// -------------------------------
+// Config schema & load
+// -------------------------------
+const EnvSchema = z.object({
+  RPC_URL: z.string().min(1, 'RPC_URL is required'),
+  PRIVATE_KEY: z.string().min(1, 'PRIVATE_KEY is required'),
+  ORACLE_ADDRESS: z.string().min(1, 'ORACLE_ADDRESS is required'),
+  PRICE_SOURCE_URL: z.string().url().optional(),
+  SCALE: z.string().regex(/^\d+$/).optional(),
+  HEARTBEAT_SEC: z.string().regex(/^\d+$/).optional(),
+  PUSH_INTERVAL_MS: z.string().regex(/^\d+$/).optional()
+});
+
+const parsed = EnvSchema.safeParse(process.env);
+if (!parsed.success) {
+  console.error('環境変数エラー:', parsed.error.flatten().fieldErrors);
+  process.exit(1);
+}
+
+const ENV = parsed.data;
+
+// -------------------------------
+// Constants / ABI
+// -------------------------------
+const OracleAbi = [
+  'function pushPrice(uint256 price) external',
+  'function priceScale() external view returns (uint64)',
+  'function heartbeat() external view returns (uint64)',
+  'function lastUpdated() external view returns (uint64)'
+];
+
+// -------------------------------
+// Utilities
+// -------------------------------
+function roundToScale(price: number, scale: bigint): bigint {
+  return BigInt(Math.round(price * Number(scale)));
+}
+
+function sleep(ms: number): Promise<void> {
+  return new Promise((res) => setTimeout(res, ms));
+}
+
+// -------------------------------
+// Price fetcher
+// -------------------------------
+async function fetchPriceOnce(url: string, timeoutMs = 1500): Promise<number> {
+  const resp = await pTimeout(axios.get(url), { milliseconds: timeoutMs });
+  // 想定レスポンス: { price: number }
+  const v = Number((resp.data as any)?.price);
+  if (!Number.isFinite(v) || v <= 0) throw new Error('bad price from source');
+  return v;
+}
+
+async function fetchPriceWithRetry(url: string): Promise<number> {
+  return pRetry(() => fetchPriceOnce(url), {
+    retries: 3,
+    factor: 2,
+    minTimeout: 250,
+    maxTimeout: 1500,
+    onFailedAttempt: (err) => {
+      console.warn(`価格取得リトライ: ${err.attemptNumber}/${err.retriesLeft} 残り`);
+    }
+  });
+}
+
+// -------------------------------
+// Main routine
+// -------------------------------
+async function main() {
+  const provider = new ethers.JsonRpcProvider(ENV.RPC_URL);
+  const wallet = new ethers.Wallet(ENV.PRIVATE_KEY, provider);
+  const oracle = new ethers.Contract(ENV.ORACLE_ADDRESS, OracleAbi, wallet);
+
+  // on-chain 値の取得（環境変数で上書き可）
+  const onChainScale = BigInt(await oracle.priceScale());
+  const onChainHeartbeat = BigInt(await oracle.heartbeat());
+
+  const scale: bigint = ENV.SCALE ? BigInt(ENV.SCALE) : onChainScale;
+  const heartbeatSec: bigint = ENV.HEARTBEAT_SEC ? BigInt(ENV.HEARTBEAT_SEC) : onChainHeartbeat;
+
+  let pushIntervalMs: number = Number(ENV.PUSH_INTERVAL_MS ?? '3000');
+  const hbMs = Number(heartbeatSec) * 1000;
+  if (pushIntervalMs >= hbMs) {
+    console.warn(`PUSH_INTERVAL_MS(${pushIntervalMs}) が HEARTBEAT(${hbMs}) 以上です。間隔を調整します。`);
+    // heartbeat より少し短くする（200ms マージン）
+    pushIntervalMs = Math.max(500, hbMs - 200);
+  }
+
+  console.log('--- Oracle Reporter 起動 ---');
+  console.log('network:', await provider.getNetwork());
+  console.log('reporter:', await wallet.getAddress());
+  console.log('oracle  :', ENV.ORACLE_ADDRESS);
+  console.log('scale   :', scale.toString());
+  console.log('heartbeat(sec):', heartbeatSec.toString());
+  console.log('interval(ms)  :', pushIntervalMs);
+
+  const sourceUrl = ENV.PRICE_SOURCE_URL ?? 'https://example.com/price';
+  console.log('price source  :', sourceUrl);
+
+  let pushing = false;
+
+  const pushOnce = async () => {
+    if (pushing) {
+      console.warn('前回の push が進行中のためスキップ');
+      return;
+    }
+    pushing = true;
+    try {
+      // 1) 外部価格取得（リトライ付き）
+      const offchain = await fetchPriceWithRetry(sourceUrl);
+      // 2) 丸め（scale 単位）
+      const onchain = roundToScale(offchain, scale);
+
+      // 3) 送信（ガス設定）
+      const fee = await provider.getFeeData();
+      const tx = await oracle.pushPrice(onchain, {
+        maxFeePerGas: fee.maxFeePerGas ?? undefined,
+        maxPriorityFeePerGas: fee.maxPriorityFeePerGas ?? undefined
+      });
+      const rec = await tx.wait();
+
+      const now = Math.floor(Date.now() / 1000);
+      console.log(
+        `pushed price=${onchain.toString()} ts=${now} tx=${rec?.hash}`
+      );
+    } catch (err) {
+      console.error('push 失敗:', err);
+    } finally {
+      pushing = false;
+    }
+  };
+
+  // 初回即時 push
+  await pushOnce();
+  // 定期 push
+  const timer = setInterval(pushOnce, pushIntervalMs);
+
+  // Graceful shutdown
+  const shutdown = async (sig: string) => {
+    console.log(`受信: ${sig}、シャットダウンします…`);
+    clearInterval(timer);
+    // 最後に軽く待機
+    await sleep(200);
+    process.exit(0);
+  };
+  process.on('SIGINT', () => void shutdown('SIGINT'));
+  process.on('SIGTERM', () => void shutdown('SIGTERM'));
+}
+
+main().catch((e) => {
+  console.error('致命的エラー:', e);
+  process.exit(1);
+});
+
diff --git a/reporter/tsconfig.json b/reporter/tsconfig.json
new file mode 100644
index 0000000..1f796f5
--- /dev/null
+++ b/reporter/tsconfig.json
@@ -0,0 +1,16 @@
+{
+  "compilerOptions": {
+    "target": "ES2020",
+    "module": "ESNext",
+    "moduleResolution": "NodeNext",
+    "outDir": "dist",
+    "rootDir": "src",
+    "strict": true,
+    "esModuleInterop": true,
+    "forceConsistentCasingInFileNames": true,
+    "skipLibCheck": true,
+    "resolveJsonModule": true
+  },
+  "include": ["src/**/*.ts"]
+}
+
-- 
2.39.5 (Apple Git-154)

