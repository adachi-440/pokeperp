From 66830f5e754c072ed0ffbbf94381f640d95c3161 Mon Sep 17 00:00:00 2001
From: 0xshora <112358132134.fibon@gmail.com>
Date: Sun, 14 Sep 2025 17:35:04 +0900
Subject: [PATCH 3/4] =?UTF-8?q?**=E8=BF=BD=E5=8A=A0=E5=AE=9F=E8=A3=85**=20?=
 =?UTF-8?q?-=20=E5=90=8C=E5=80=A4=E3=82=B9=E3=82=AD=E3=83=83=E3=83=97?=
 =?UTF-8?q?=E3=83=BB=E3=83=89=E3=83=A9=E3=82=A4=E3=83=A9=E3=83=B3=E5=AF=BE?=
 =?UTF-8?q?=E5=BF=9C=20=20=20-=20`SKIP=5FSAME=5FPRICE=3Dtrue`=20=E3=81=A7?=
 =?UTF-8?q?=E7=9B=B4=E8=BF=91=E9=80=81=E4=BF=A1=E5=80=A4=EF=BC=8F=E3=82=AA?=
 =?UTF-8?q?=E3=83=B3=E3=83=81=E3=82=A7=E3=83=BC=E3=83=B3=E5=80=A4=E3=81=A8?=
 =?UTF-8?q?=E5=90=8C=E3=81=98=E5=A0=B4=E5=90=88=E3=81=AF=E9=80=81=E4=BF=A1?=
 =?UTF-8?q?=E3=82=B9=E3=82=AD=E3=83=83=E3=83=97=E3=80=82=20=20=20-=20`DRY?=
 =?UTF-8?q?=5FRUN=3Dtrue`=20=E3=81=A7=E3=83=88=E3=83=A9=E3=83=B3=E3=82=B6?=
 =?UTF-8?q?=E3=82=AF=E3=82=B7=E3=83=A7=E3=83=B3=E9=80=81=E4=BF=A1=E3=81=9B?=
 =?UTF-8?q?=E3=81=9A=E3=83=AD=E3=82=B0=E3=81=AE=E3=81=BF=E3=80=82=20-=20?=
 =?UTF-8?q?=E8=A3=9C=E5=8A=A9=E3=82=B9=E3=82=AF=E3=83=AA=E3=83=97=E3=83=88?=
 =?UTF-8?q?=20=20=20-=20`npm=20run=20check`:=20on-chain=20=E3=81=AE=20`pri?=
 =?UTF-8?q?ceScale/heartbeat/lastUpdated/indexPrice/markPrice`=20=E3=82=92?=
 =?UTF-8?q?=E8=A1=A8=E7=A4=BA=E3=80=82=20=20=20-=20`npm=20run=20admin`:=20?=
 =?UTF-8?q?=E3=82=AA=E3=83=BC=E3=83=8A=E3=83=BC=E6=A8=A9=E9=99=90=E6=93=8D?=
 =?UTF-8?q?=E4=BD=9C=EF=BC=88`set-reporter`,=20`set-heartbeat`,=20`pause`,?=
 =?UTF-8?q?=20`get`=EF=BC=89=E3=80=82=20=20=20-=20`npm=20run=20mock`:=20?=
 =?UTF-8?q?=E3=83=AD=E3=83=BC=E3=82=AB=E3=83=AB=E4=BE=A1=E6=A0=BC=E3=83=A2?=
 =?UTF-8?q?=E3=83=83=E3=82=AF=EF=BC=88`http://localhost:8787/price`?=
 =?UTF-8?q?=EF=BC=89=E3=80=82?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

**更新内容**
- `reporter/src/index.ts`: 環境変数バリデーション、鮮度警告、同値スキップ、ドライラン、ログ強化。
- `reporter/src/check.ts`: 状態確認スクリプトを追加。
- `reporter/src/admin.ts`: 管理操作スクリプトを追加。
- `reporter/src/mock_price_server.ts`: モック価格サーバーを追加。
- `reporter/.env.example`: `SKIP_SAME_PRICE`, `DRY_RUN` を追記。
- `reporter/package.json`: `check`, `admin`, `mock` スクリプトを追加。
- `reporter/README.md`: 使い方と確認・管理手順を追記。

**動作確認フロー（例）**
- モックで疎通
  - `npm run mock` を起動 → `.env` の `PRICE_SOURCE_URL=http://localhost:8787/price`
  - `npm run dev` で定期 push（実ネットに繋がる RPC/鍵が必要）
- 状態確認
  - `npm run check`（scale/heartbeat/lastUpdated/price/freshness を確認）
- 管理操作（オーナー鍵で実施）
  - `npm run admin -- get`
  - `npm run admin -- set-reporter 0xYourReporter`
  - `npm run admin -- set-heartbeat 10`
  - `npm run admin -- pause true|false`

**補足**
- コントラクト側（OracleAdapterSimple）が未配置の場合は、デプロイと `setReporter` が必要です。必要なら Solidity 実装/Foundry スクリプトの追加も対応します。
- 実運用時は `PRICE_SOURCE_URL` を実APIに差し替え、エラー通知（Slack等）や複数ソースのメディアン集計も拡張可能です。

次に、Oracle Adapter（Solidity）の追加・デプロイフローまで整備しますか？それとも Reporter の追加要件（複数ソース集計や価格変化閾値など）を先に進めますか。
---
 reporter/.env.example |  5 +++
 reporter/README.md    | 23 +++++++++++
 reporter/package.json |  4 +-
 reporter/src/admin.ts | 96 +++++++++++++++++++++++++++++++++++++++++++
 reporter/src/check.ts | 58 ++++++++++++++++++++++++++
 reporter/src/index.ts | 43 +++++++++++++++++--
 6 files changed, 225 insertions(+), 4 deletions(-)
 create mode 100644 reporter/src/admin.ts
 create mode 100644 reporter/src/check.ts

diff --git a/reporter/.env.example b/reporter/.env.example
index d6fd540..9a1c85f 100644
--- a/reporter/.env.example
+++ b/reporter/.env.example
@@ -14,3 +14,8 @@ PUSH_INTERVAL_MS=3000
 # レスポンスは { "price": <number> } を想定
 PRICE_SOURCE_URL=https://example.com/price
 
+# 開発・運用向けスイッチ
+# 同一価格なら送信スキップ（オンチェーン/直近送信と比較）
+SKIP_SAME_PRICE=true
+# 送信せずログのみ
+DRY_RUN=false
diff --git a/reporter/README.md b/reporter/README.md
index 37fddc5..a0a4be7 100644
--- a/reporter/README.md
+++ b/reporter/README.md
@@ -23,6 +23,8 @@ npm i
 - `SCALE`: on-chain の `priceScale()` を上書き（例: `100`）
 - `HEARTBEAT_SEC`: on-chain の `heartbeat()` を上書き（例: `10`）
 - `PUSH_INTERVAL_MS`: 実際の送信間隔（デフォルト 3000ms）
+ - `SKIP_SAME_PRICE`: 同値なら送信スキップ（`true/false`）
+ - `DRY_RUN`: 送信せずログのみ（`true/false`）
 
 ## 実行
 開発（トランスパイル無し）:
@@ -48,6 +50,27 @@ npm run mock
 npm run dev
 ```
 
+オンチェーン状態の確認（スケール/ハートビート/価格/鮮度）:
+```
+npm run check
+```
+
+管理操作（オーナーアドレスの秘密鍵を `.env` の `PRIVATE_KEY` に設定して実行）:
+```
+# 現在値の取得
+npm run admin -- get
+
+# Reporter の設定（EOA アドレス）
+npm run admin -- set-reporter 0xYourReporter
+
+# Heartbeat（秒）の更新
+npm run admin -- set-heartbeat 10
+
+# pause / unpause
+npm run admin -- pause true
+npm run admin -- pause false
+```
+
 ## 動作概要
 - 起動時に on-chain の `priceScale()`/`heartbeat()` を取得（環境変数で上書き可）。
 - 指定間隔で `PRICE_SOURCE_URL` から価格を取得し、`scale` に丸めて `pushPrice` を送信。
diff --git a/reporter/package.json b/reporter/package.json
index 5f812b5..142c1a7 100644
--- a/reporter/package.json
+++ b/reporter/package.json
@@ -9,7 +9,9 @@
     "build": "tsc -p tsconfig.json",
     "start": "node dist/index.js",
     "typecheck": "tsc -p tsconfig.json --noEmit",
-    "mock": "tsx src/mock_price_server.ts"
+    "mock": "tsx src/mock_price_server.ts",
+    "check": "tsx src/check.ts",
+    "admin": "tsx src/admin.ts"
   },
   "dependencies": {
     "axios": "^1.7.7",
diff --git a/reporter/src/admin.ts b/reporter/src/admin.ts
new file mode 100644
index 0000000..66725f6
--- /dev/null
+++ b/reporter/src/admin.ts
@@ -0,0 +1,96 @@
+import 'dotenv/config';
+import { z } from 'zod';
+import { ethers } from 'ethers';
+
+const EnvSchema = z.object({
+  RPC_URL: z.string().min(1),
+  PRIVATE_KEY: z.string().min(1), // オーナー鍵を想定
+  ORACLE_ADDRESS: z.string().min(1)
+});
+
+const parsed = EnvSchema.safeParse(process.env);
+if (!parsed.success) {
+  console.error('環境変数エラー:', parsed.error.flatten().fieldErrors);
+  process.exit(1);
+}
+
+const { RPC_URL, PRIVATE_KEY, ORACLE_ADDRESS } = parsed.data as {
+  RPC_URL: string;
+  PRIVATE_KEY: string;
+  ORACLE_ADDRESS: string;
+};
+
+const OracleAbi = [
+  'function setReporter(address reporter) external',
+  'function setHeartbeat(uint64 heartbeatSec) external',
+  'function pause(bool p) external',
+  'function reporter() external view returns (address)',
+  'function heartbeat() external view returns (uint64)',
+  'function priceScale() external view returns (uint64)',
+  'function lastUpdated() external view returns (uint64)',
+  'function indexPrice() external view returns (uint256)'
+];
+
+async function main() {
+  const [cmd, arg] = process.argv.slice(2);
+  const provider = new ethers.JsonRpcProvider(RPC_URL);
+  const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
+  const oracle = new ethers.Contract(ORACLE_ADDRESS, OracleAbi, wallet);
+
+  switch (cmd) {
+    case 'get': {
+      const [rep, hb, sc, lu, idx] = await Promise.all([
+        oracle.reporter(),
+        oracle.heartbeat(),
+        oracle.priceScale(),
+        oracle.lastUpdated(),
+        oracle.indexPrice()
+      ]);
+      console.log({
+        reporter: rep,
+        heartbeatSec: hb.toString(),
+        priceScale: sc.toString(),
+        lastUpdated: lu.toString(),
+        indexPrice: idx.toString()
+      });
+      break;
+    }
+    case 'set-reporter': {
+      if (!arg) throw new Error('usage: admin set-reporter <address>');
+      const tx = await oracle.setReporter(arg);
+      const rec = await tx.wait();
+      console.log('setReporter tx:', rec?.hash);
+      break;
+    }
+    case 'set-heartbeat': {
+      if (!arg || !/^\d+$/.test(arg)) throw new Error('usage: admin set-heartbeat <sec>');
+      const hb = BigInt(arg);
+      const tx = await oracle.setHeartbeat(hb);
+      const rec = await tx.wait();
+      console.log('setHeartbeat tx:', rec?.hash);
+      break;
+    }
+    case 'pause': {
+      if (!arg || !/^(true|false)$/i.test(arg)) throw new Error('usage: admin pause <true|false>');
+      const p = arg.toLowerCase() === 'true';
+      const tx = await oracle.pause(p);
+      const rec = await tx.wait();
+      console.log('pause tx:', rec?.hash);
+      break;
+    }
+    default: {
+      console.log('Usage:');
+      console.log('  npm run admin -- get');
+      console.log('  npm run admin -- set-reporter <address>');
+      console.log('  npm run admin -- set-heartbeat <sec>');
+      console.log('  npm run admin -- pause <true|false>');
+      process.exit(1);
+    }
+  }
+}
+
+main().catch((e) => {
+  console.error(e);
+  process.exit(1);
+});
+
diff --git a/reporter/src/check.ts b/reporter/src/check.ts
new file mode 100644
index 0000000..a9e94cc
--- /dev/null
+++ b/reporter/src/check.ts
@@ -0,0 +1,58 @@
+import 'dotenv/config';
+import { z } from 'zod';
+import { ethers } from 'ethers';
+
+const EnvSchema = z.object({
+  RPC_URL: z.string().min(1),
+  ORACLE_ADDRESS: z.string().min(1)
+});
+
+const parsed = EnvSchema.safeParse(process.env);
+if (!parsed.success) {
+  console.error('環境変数エラー:', parsed.error.flatten().fieldErrors);
+  process.exit(1);
+}
+
+const { RPC_URL, ORACLE_ADDRESS } = parsed.data as { RPC_URL: string; ORACLE_ADDRESS: string };
+
+const OracleAbi = [
+  'function priceScale() external view returns (uint64)',
+  'function heartbeat() external view returns (uint64)',
+  'function lastUpdated() external view returns (uint64)',
+  'function indexPrice() external view returns (uint256)',
+  'function markPrice() external view returns (uint256)'
+];
+
+async function main() {
+  const provider = new ethers.JsonRpcProvider(RPC_URL);
+  const net = await provider.getNetwork();
+  const oracle = new ethers.Contract(ORACLE_ADDRESS, OracleAbi, provider);
+
+  const [scale, hb, lu, idx, mrk] = await Promise.all([
+    oracle.priceScale(),
+    oracle.heartbeat(),
+    oracle.lastUpdated(),
+    oracle.indexPrice(),
+    oracle.markPrice()
+  ]);
+
+  const luNum = Number(lu);
+  const hbNum = Number(hb);
+  const nowSec = Math.floor(Date.now() / 1000);
+  const age = nowSec - luNum;
+
+  console.log('network      :', net);
+  console.log('oracle       :', ORACLE_ADDRESS);
+  console.log('priceScale   :', scale.toString());
+  console.log('heartbeat(s) :', hb.toString());
+  console.log('lastUpdated  :', lu.toString(), `(age=${age}s, ${new Date(luNum * 1000).toISOString()})`);
+  console.log('indexPrice   :', idx.toString());
+  console.log('markPrice    :', mrk.toString());
+  console.log('fresh?       :', age <= hbNum);
+}
+
+main().catch((e) => {
+  console.error(e);
+  process.exit(1);
+});
+
diff --git a/reporter/src/index.ts b/reporter/src/index.ts
index 371fe47..a855389 100644
--- a/reporter/src/index.ts
+++ b/reporter/src/index.ts
@@ -14,7 +14,9 @@ const EnvSchema = z.object({
   PRICE_SOURCE_URL: z.string().url().optional(),
   SCALE: z.string().regex(/^\d+$/).optional(),
   HEARTBEAT_SEC: z.string().regex(/^\d+$/).optional(),
-  PUSH_INTERVAL_MS: z.string().regex(/^\d+$/).optional()
+  PUSH_INTERVAL_MS: z.string().regex(/^\d+$/).optional(),
+  DRY_RUN: z.string().optional(),
+  SKIP_SAME_PRICE: z.string().optional()
 });
 
 const parsed = EnvSchema.safeParse(process.env);
@@ -32,7 +34,8 @@ const OracleAbi = [
   'function pushPrice(uint256 price) external',
   'function priceScale() external view returns (uint64)',
   'function heartbeat() external view returns (uint64)',
-  'function lastUpdated() external view returns (uint64)'
+  'function lastUpdated() external view returns (uint64)',
+  'function indexPrice() external view returns (uint256)'
 ];
 
 // -------------------------------
@@ -46,6 +49,11 @@ function sleep(ms: number): Promise<void> {
   return new Promise((res) => setTimeout(res, ms));
 }
 
+function isTruthy(v?: string): boolean {
+  if (!v) return false;
+  return ['1', 'true', 'yes', 'on'].includes(v.toLowerCase());
+}
+
 // -------------------------------
 // Price fetcher
 // -------------------------------
@@ -102,8 +110,13 @@ async function main() {
 
   const sourceUrl = ENV.PRICE_SOURCE_URL ?? 'https://example.com/price';
   console.log('price source  :', sourceUrl);
+  const dryRun = isTruthy(ENV.DRY_RUN);
+  const skipSame = isTruthy(ENV.SKIP_SAME_PRICE);
+  console.log('dryRun        :', dryRun);
+  console.log('skipSame      :', skipSame);
 
   let pushing = false;
+  let lastSentPrice: bigint | undefined;
 
   const pushOnce = async () => {
     if (pushing) {
@@ -129,7 +142,30 @@ async function main() {
       // 2) 丸め（scale 単位）
       const onchain = roundToScale(offchain, scale);
 
-      // 3) 送信（ガス設定）
+      // 2.5) 同値スキップ（任意）
+      if (skipSame) {
+        if (lastSentPrice !== undefined && lastSentPrice === onchain) {
+          console.log('同値（直近送信値）→ 送信スキップ:', onchain.toString());
+          return;
+        }
+        try {
+          const current: bigint = BigInt(await oracle.indexPrice());
+          if (current === onchain) {
+            console.log('同値（オンチェーン）→ 送信スキップ:', onchain.toString());
+            return;
+          }
+        } catch (e) {
+          console.warn('オンチェーン価格取得失敗（skipSame判定を継続）:', e);
+        }
+      }
+
+      // 3) 送信（ガス設定 or ドライラン）
+      if (dryRun) {
+        const now = Math.floor(Date.now() / 1000);
+        console.log(`DRY_RUN: pushPrice(${onchain.toString()}) ts=${now}`);
+        lastSentPrice = onchain;
+        return;
+      }
       const fee = await provider.getFeeData();
       const tx = await oracle.pushPrice(onchain, {
         maxFeePerGas: fee.maxFeePerGas ?? undefined,
@@ -141,6 +177,7 @@ async function main() {
       console.log(
         `pushed price=${onchain.toString()} ts=${now} tx=${rec?.hash}`
       );
+      lastSentPrice = onchain;
     } catch (err) {
       console.error('push 失敗:', err);
     } finally {
-- 
2.39.5 (Apple Git-154)

